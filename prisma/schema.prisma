generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id             String    @id @default(uuid())
  name           String?
  username       String    @unique
  password       String
  age            Int?
  gender         String? 
  email          String    @unique
  photo          String?
  language       String?
  interests      String[]
  favouriteTools String[]
  personType     String
  skills         String[]     // e.g. ["Node.js", "AI/ML"]
 
  madeTillFar    String?
  promptTagline  String?
  purpose        String[]
  domain         String?      // âœ… new: "Tech", "Design", etc
  onboardingComplete Boolean @default(false)

  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  posts          Post[]     @relation("UserPosts")
  comments       Comment[]  @relation("UserComments")
  votes          Vote[]
  swipesGiven    Swipe[]     @relation("SwipesGiven")
  swipesReceived Swipe[]     @relation("SwipesReceived")
  matchesAsUser1 Match[]     @relation("User1Matches")
  matchesAsUser2 Match[]     @relation("User2Matches")
  chats          Chat[]      @relation("ChatParticipants")
}


model Post {
  id             String     @id @default(uuid())
  title          String
  description    String
  type           PostType
  techstack      String
  authorId       String
  author         User       @relation("UserPosts", fields: [authorId], references: [id])
  contributorIds String[]
  allowJoinTeam  Boolean    @default(false)
  likes          Int        @default(0)
  badge          String?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  comments       Comment[]
  votes          Vote[]
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  postId    String
  post      Post     @relation(fields: [postId], references: [id])
  authorId  String
  author    User     @relation("UserComments", fields: [authorId], references: [id])
  createdAt DateTime @default(now())
}

model Vote {
  id       String   @id @default(uuid())
  userId   String
  postId   String
  type     VoteType

  // ðŸ‘‡ Relations
  user     User     @relation(fields: [userId], references: [id])
  post     Post     @relation(fields: [postId], references: [id])
}

enum PostType {
  PRODUCT
  PROJECT
}

enum VoteType {
  UPVOTE
  DOWNVOTE
}


model Swipe {
  id        String         @id @default(uuid())
  swiperId  String
  swiper    User           @relation("SwipesGiven", fields: [swiperId], references: [id])
  swipedId  String
  swiped    User           @relation("SwipesReceived", fields: [swipedId], references: [id])
  direction SwipeDirection
  purpose   SwipePurpose
  domain    String?         // optional domain/interest like AI, Web3
  createdAt DateTime        @default(now())

  @@unique([swiperId, swipedId])
  @@index([swiperId, swipedId])
}

model Match {
  id         String       @id @default(uuid())
  user1Id    String
  user2Id    String
  user1      User         @relation("User1Matches", fields: [user1Id], references: [id])
  user2      User         @relation("User2Matches", fields: [user2Id], references: [id])
  purpose    SwipePurpose
  createdAt  DateTime     @default(now())
  chats      Chat[]       @relation("MatchChats") 

  @@unique([user1Id, user2Id])
}

model Chat {
  id         String     @id @default(uuid())
  matchId    String
  match     Match    @relation("MatchChats", fields: [matchId], references: [id])
  senderId  String
  sender     User       @relation("ChatParticipants", fields: [senderId], references: [id])
  message    String
  createdAt  DateTime   @default(now())
}

enum SwipeDirection {
  RIGHT
  LEFT
}

enum SwipePurpose {
  COLLABORATION
  HIRING
  NETWORKING
  CAREER_GUIDANCE
}
